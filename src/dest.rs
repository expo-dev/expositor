use crate::util::pdep;

// A word about pdep ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
//
//   When the compilation target architecture is AMD64 / Intel 64, a compiler intrinsic is used
//   (which should cause the compiler to emit a single instruction). On Intel processors, pdep
//   is reasonably fast (and in fact, generating bitboards with pext and pdep is a viable alter-
//   native to perfect hashing). As for AMD processors: Zen 3 processors have hardware implemen-
//   tations of pext and pdep, but Zen 2 processors have microcode emulations with a latency and
//   throughput of 19 cycles. As a result, methods that use these instructions are comparatively
//   slow, and should only be used in one-time setup code.
//
//   When the compilation target architecture does not support the BMI2 extension, a software
//   implementation of pdep is used. The execution time depends on the mask, but generally
//   speaking, it's quite slow, and so pdep should only be used in one-time setup code.

// Knight destinations ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

static mut KNIGHT_TABLE : [u64; 64] = [0; 64];

fn generate_knight_table()
{
  let jumps = [(-2, -1), (-2,  1), (-1, -2), (-1,  2),
               ( 1, -2), ( 1,  2), ( 2, -1), ( 2,  1)];
  for square in 0..64 {
    let mut dests : u64 = 0;
    let rank = square / 8;
    let file = square % 8;
    for (dr, df) in jumps.iter() {
      let r = rank + dr;
      let f = file + df;
      if r < 0 || r > 7 { continue };
      if f < 0 || f > 7 { continue };
      dests |= 1 << (r*8 + f);
    }
    unsafe { KNIGHT_TABLE[square as usize] = dests; }
  }
}

pub fn knight_destinations(square : usize) -> u64
{
  return unsafe { *KNIGHT_TABLE.get_unchecked(square) };
}

// Bishop destinations ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

fn slow_bishop_destinations(board : u64, square : usize) -> u64
{
  let mut dests : u64 = 0;
  let steps = [(-1, -1), (-1, 1), (1, -1), (1, 1)];
  let rank : isize = (square as isize) / 8;
  let file : isize = (square as isize) % 8;
  for (dr, df) in steps.iter() {
    let mut r = rank;
    let mut f = file;
    loop {
      r += dr;
      f += df;
      if r < 0 || r > 7 { break; }
      if f < 0 || f > 7 { break; }
      let dst = 1 << (r*8 + f);
      dests |= dst;
      if board & dst != 0 { break; }
    }
  }
  return dests;
}

static SALT_MASK : [u64; 64] = // saltire span
  [0x0040201008040200, 0x0000402010080400, 0x0000004020100a00, 0x0000000040221400,
   0x0000000002442800, 0x0000000204085000, 0x0000020408102000, 0x0002040810204000,
   0x0020100804020000, 0x0040201008040000, 0x00004020100a0000, 0x0000004022140000,
   0x0000000244280000, 0x0000020408500000, 0x0002040810200000, 0x0004081020400000,
   0x0010080402000200, 0x0020100804000400, 0x004020100a000a00, 0x0000402214001400,
   0x0000024428002800, 0x0002040850005000, 0x0004081020002000, 0x0008102040004000,
   0x0008040200020400, 0x0010080400040800, 0x0020100a000a1000, 0x0040221400142200,
   0x0002442800284400, 0x0004085000500800, 0x0008102000201000, 0x0010204000402000,
   0x0004020002040800, 0x0008040004081000, 0x00100a000a102000, 0x0022140014224000,
   0x0044280028440200, 0x0008500050080400, 0x0010200020100800, 0x0020400040201000,
   0x0002000204081000, 0x0004000408102000, 0x000a000a10204000, 0x0014001422400000,
   0x0028002844020000, 0x0050005008040200, 0x0020002010080400, 0x0040004020100800,
   0x0000020408102000, 0x0000040810204000, 0x00000a1020400000, 0x0000142240000000,
   0x0000284402000000, 0x0000500804020000, 0x0000201008040200, 0x0000402010080400,
   0x0002040810204000, 0x0004081020400000, 0x000a102040000000, 0x0014224000000000,
   0x0028440200000000, 0x0050080402000000, 0x0020100804020000, 0x0040201008040200];

static BISHOP_CONST : [u64; 64] =
  [0xfa44b1ddbddbffff, 0xcb06900d4e77f51c, 0xfddc17ff9ffbbf7b, 0x67fdbf7af8f5b58f,
   0x0c64146004360402, 0xe9fa9010581090e8, 0xfbb451da337fb4fd, 0xfbf92bfbfd797fee,
   0xd5ae73f5f9a9fff7, 0x5d39366919ad27fe, 0x0005900102042000, 0x87121c140781c187,
   0x97443c0b081e2e25, 0xfeaffee7a7febd9f, 0xefbffda2e757ffdf, 0xff5ebc4bf5b9ffff,
   0xcf409575ecb4efd7, 0x51e01cc559ed97ed, 0x1410008b68d601c0, 0xe0080464043152a0,
   0x0001000a90400006, 0x8000200110101000, 0x385c0404b4eaffd2, 0xba7e00eba1631fe3,
   0x0808040420041000, 0x14100471c8411420, 0x61202480d00c0280, 0x8100404004010200,
   0x0029010081504002, 0x0120410006008200, 0x0072833120841000, 0x4914118219004308,
   0x0048080800400280, 0x0450884c40481013, 0x0093814040040404, 0x1801160080480080,
   0x8004080200002008, 0x2104458200018800, 0x0a75080208010153, 0x52210c04b6090100,
   0x3defe9d50973407e, 0xc517ed79c56e6005, 0xd4a0a02030051812, 0x0010004200800800,
   0x000806020c000601, 0xc428101080201e04, 0x963fbaccdcb45407, 0x9c3fe2c18fa38601,
   0xfefffac65ff571de, 0x8f73f59804db1fe8, 0x0000020303880122, 0x095e0400840c0b8a,
   0x0080c810860a0111, 0xf7feff1fd3eee22e, 0xaf7ed9ebfd2f341d, 0xffffb9e7f6e64b37,
   0xeff7ff33fd72bfbf, 0xb6def7feee746ddb, 0xff7ffdbf3f3ebe7d, 0x0202000800421200,
   0x0000488018912400, 0x06028025a408220a, 0xf5f47db579e993ff, 0xb7ff9e7bf755ffd7];

static BISHOP_SHIFT : [u8; 64] =
  [59, 60, 59, 59, 59, 59, 60, 59,
   60, 60, 59, 59, 59, 59, 60, 60,
   60, 60, 57, 57, 57, 57, 60, 60,
   59, 59, 57, 55, 55, 57, 59, 59,
   59, 59, 57, 55, 55, 57, 59, 59,
   60, 60, 57, 57, 57, 57, 60, 60,
   60, 60, 59, 59, 59, 59, 60, 60,
   59, 60, 59, 59, 59, 59, 60, 59];

static mut BISHOP_TABLE : [[u64; 512]; 64] = [[0; 512]; 64];

fn generate_bishop_table()
{
  for square in 0..64 {
    let relevant : u64 = slow_bishop_destinations(0, square) & SALT_MASK[square];
    let num_patterns = 1 << relevant.count_ones();
    for x in 0..num_patterns {
      let pattern = unsafe { pdep(x, relevant) };
      let dests = slow_bishop_destinations(pattern, square);
      let index = pattern.wrapping_mul(BISHOP_CONST[square]) >> BISHOP_SHIFT[square];
      unsafe { BISHOP_TABLE[square][index as usize] = dests; }
    }
  }
}

pub fn bishop_destinations(board : u64, square : usize) -> u64
{
  unsafe {
    let board = board & SALT_MASK.get_unchecked(square);
    let index =
      board.wrapping_mul(*BISHOP_CONST.get_unchecked(square))
      >> BISHOP_SHIFT.get_unchecked(square);
    return *BISHOP_TABLE.get_unchecked(square).get_unchecked(index as usize);
  }
}

// Rook destinations ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

fn slow_rook_destinations(board : u64, square : usize) -> u64
{
  let mut dests : u64 = 0;
  let steps = [(-1, 0), (1, 0), (0, -1), (0, 1)];
  let rank : isize = (square as isize) / 8;
  let file : isize = (square as isize) % 8;
  for (dr, df) in steps.iter() {
    let mut r = rank;
    let mut f = file;
    loop {
      r += dr;
      f += df;
      if r < 0 || r > 7 { break; }
      if f < 0 || f > 7 { break; }
      let dst = 1 << (r*8 + f);
      dests |= dst;
      if board & dst != 0 { break; }
    }
  }
  return dests;
}

static CRUX_MASK : [u64; 64] = // cruciform mask
  [0x000101010101017e, 0x000202020202027c, 0x000404040404047a, 0x0008080808080876,
   0x001010101010106e, 0x002020202020205e, 0x004040404040403e, 0x008080808080807e,
   0x0001010101017e00, 0x0002020202027c00, 0x0004040404047a00, 0x0008080808087600,
   0x0010101010106e00, 0x0020202020205e00, 0x0040404040403e00, 0x0080808080807e00,
   0x00010101017e0100, 0x00020202027c0200, 0x00040404047a0400, 0x0008080808760800,
   0x00101010106e1000, 0x00202020205e2000, 0x00404040403e4000, 0x00808080807e8000,
   0x000101017e010100, 0x000202027c020200, 0x000404047a040400, 0x0008080876080800,
   0x001010106e101000, 0x002020205e202000, 0x004040403e404000, 0x008080807e808000,
   0x0001017e01010100, 0x0002027c02020200, 0x0004047a04040400, 0x0008087608080800,
   0x0010106e10101000, 0x0020205e20202000, 0x0040403e40404000, 0x0080807e80808000,
   0x00017e0101010100, 0x00027c0202020200, 0x00047a0404040400, 0x0008760808080800,
   0x00106e1010101000, 0x00205e2020202000, 0x00403e4040404000, 0x00807e8080808000,
   0x007e010101010100, 0x007c020202020200, 0x007a040404040400, 0x0076080808080800,
   0x006e101010101000, 0x005e202020202000, 0x003e404040404000, 0x007e808080808000,
   0x7e01010101010100, 0x7c02020202020200, 0x7a04040404040400, 0x7608080808080800,
   0x6e10101010101000, 0x5e20202020202000, 0x3e40404040404000, 0x7e80808080808000];

static ROOK_CONST : [u64; 64] =
  [0x1180002040008014, 0x2040094210002002, 0x2880200082081000, 0x208010003c808800,
   0x220010084a002034, 0x1a0002004c015008, 0x8100140881000600, 0x82000a2044820104,
   0x1002800240008e20, 0x0040804000200180, 0x0001001100482000, 0x10290018d0010024,
   0x0009000501080050, 0x0209800400800201, 0x0105002441000200, 0x0081000892014100,
   0x0002238000844002, 0x8002c04009201000, 0x0000808020001008, 0x8090010020110028,
   0x8422818008008400, 0x1000808004000e00, 0x407604000108d022, 0x0000060001004084,
   0x4080800480204008, 0x4000200040401000, 0x0000200880100080, 0x2020100100082100,
   0x0000880080800400, 0x000200220010080c, 0x0802180400100122, 0xe4e7884200111084,
   0x0002804000800120, 0x0100882000804000, 0x8904815001802000, 0x1410011101002108,
   0x0074040180802800, 0x8082000c12003830, 0x8000281004001e13, 0x020c008042000401,
   0x0080004160024000, 0x0040003008002000, 0x0050002000410100, 0x0000209003010008,
   0x0009000800110044, 0x0100020004008080, 0x208413301e840008, 0x0001048041020004,
   0x2084208000400080, 0x0102004109812200, 0x0040100020028080, 0x0023022049100100,
   0x0048180005003100, 0x0000020084008080, 0x0042100228018400, 0x4020990080440600,
   0x7ffffee77ffecfd3, 0xfe7ffeaefe9dff26, 0xefbfffcd7fd5ff9a, 0x60a6210810010025,
   0xefffffddffdbd576, 0x4bffffbdffdeaffa, 0x400001009008120c, 0xff1bfffecbfeafb2];

static ROOK_SHIFT : [u8; 64] =
  [52, 53, 53, 53, 53, 53, 53, 52,
   53, 54, 54, 54, 54, 54, 54, 53,
   53, 54, 54, 54, 54, 54, 54, 53,
   53, 54, 54, 54, 54, 54, 54, 53,
   53, 54, 54, 54, 54, 54, 54, 53,
   53, 54, 54, 54, 54, 54, 54, 53,
   53, 54, 54, 54, 54, 54, 54, 53,
   53, 54, 54, 53, 54, 53, 53, 53];

static mut ROOK_TABLE : [[u64; 4096]; 64] = [[0; 4096]; 64];

fn generate_rook_table()
{
  for square in 0..64 {
    let relevant : u64 = slow_rook_destinations(0, square) & CRUX_MASK[square];
    let num_patterns = 1 << relevant.count_ones();
    for x in 0..num_patterns {
      let pattern = unsafe { pdep(x, relevant) };
      let dests = slow_rook_destinations(pattern, square);
      let index = pattern.wrapping_mul(ROOK_CONST[square]) >> ROOK_SHIFT[square];
      unsafe { ROOK_TABLE[square][index as usize] = dests; }
    }
  }
}

pub fn rook_destinations(board : u64, square : usize) -> u64
{
  unsafe {
    let board = board & CRUX_MASK.get_unchecked(square);
    let index =
      board.wrapping_mul(*ROOK_CONST.get_unchecked(square))
      >> ROOK_SHIFT.get_unchecked(square);
    return *ROOK_TABLE.get_unchecked(square).get_unchecked(index as usize);
  }
}

// Queen destinations  ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

pub fn queen_destinations(board : u64, square : usize) -> u64
{
  return bishop_destinations(board, square) | rook_destinations(board, square);
}

// King destinations ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

static mut KING_TABLE : [u64; 64] = [0; 64];

fn generate_king_table()
{
  let steps = [(-1, -1), (-1,  0), (-1,  1),
               ( 0, -1),           ( 0,  1),
               ( 1, -1), ( 1,  0), ( 1,  1)];
  for square in 0..64 {
    let mut dests : u64 = 0;
    let rank = square / 8;
    let file = square % 8;
    for (dr, df) in steps.iter() {
      let r = rank + dr;
      let f = file + df;
      if r < 0 || r > 7 { continue };
      if f < 0 || f > 7 { continue };
      dests |= 1 << (r*8 + f);
    }
    unsafe { KING_TABLE[square as usize] = dests; }
  }
}

pub fn king_destinations(square : usize) -> u64
{
  return unsafe { *KING_TABLE.get_unchecked(square) };
}

// Interface for Table Generation  ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

pub fn generate_tables()
{
  generate_knight_table();
  generate_bishop_table();
  generate_rook_table();
  generate_king_table();
}

// Alternate rook destinations ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
/*
use crate::util::pext;

static mut ROOK_TABLE : [[u64; 4096]; 64] = [[0; 4096]; 64];

fn generate_rook_table()
{
  for square in 0..64 {
    let relevant : u64 = slow_rook_destinations(0, square) & CRUX_MASK[square];
    let num_patterns : usize = 1 << relevant.count_ones();
    for x in 0..num_patterns {
      let pattern = unsafe { pdep(x as u64, relevant) };
      let dests = slow_rook_destinations(pattern, square);
      unsafe { ROOK_TABLE[square][x] = dests; }
    }
  }
}

pub fn rook_destinations(board : u64, square : usize) -> u64
{
  unsafe {
    let idx = pext(board, *CRUX_MASK.get_unchecked(square)) as usize;
    return *ROOK_TABLE.get_unchecked(square).get_unchecked(idx);
  }
}
*/
// Alternate rook destinations ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
/*
use crate::util::pext;

static mut ROOK_TABLE : [[u16; 4096]; 64] = [[0; 4096]; 64];

fn generate_rook_table()
{
  for square in 0..64 {
    let relevant : u64 = slow_rook_destinations(0, square) & CRUX_MASK[square];
    let num_patterns : usize = 1 << relevant.count_ones();
    for x in 0..num_patterns {
      let pattern = unsafe { pdep(x as u64, relevant) };
      let dests = slow_rook_destinations(pattern, square);
      let compressed = unsafe { pext(dests, EDGE_CRUX_MASK[square]) };
      unsafe { ROOK_TABLE[square][x] = compressed as u16; }
    }
  }
}

pub fn rook_destinations(board : u64, square : usize) -> u64
{
  unsafe {
    let idx = pext(board, *CRUX_MASK.get_unchecked(square)) as usize;
    return pdep(
      *ROOK_TABLE.get_unchecked(square).get_unchecked(idx) as u64,
      *EDGE_CRUX_MASK.get_unchecked(square)
    );
  }
}

static EDGE_CRUX_MASK : [u64; 64] =
  [0x01010101010101fe, 0x02020202020202fd, 0x04040404040404fb, 0x08080808080808f7,
   0x10101010101010ef, 0x20202020202020df, 0x40404040404040bf, 0x808080808080807f,
   0x010101010101fe01, 0x020202020202fd02, 0x040404040404fb04, 0x080808080808f708,
   0x101010101010ef10, 0x202020202020df20, 0x404040404040bf40, 0x8080808080807f80,
   0x0101010101fe0101, 0x0202020202fd0202, 0x0404040404fb0404, 0x0808080808f70808,
   0x1010101010ef1010, 0x2020202020df2020, 0x4040404040bf4040, 0x80808080807f8080,
   0x01010101fe010101, 0x02020202fd020202, 0x04040404fb040404, 0x08080808f7080808,
   0x10101010ef101010, 0x20202020df202020, 0x40404040bf404040, 0x808080807f808080,
   0x010101fe01010101, 0x020202fd02020202, 0x040404fb04040404, 0x080808f708080808,
   0x101010ef10101010, 0x202020df20202020, 0x404040bf40404040, 0x8080807f80808080,
   0x0101fe0101010101, 0x0202fd0202020202, 0x0404fb0404040404, 0x0808f70808080808,
   0x1010ef1010101010, 0x2020df2020202020, 0x4040bf4040404040, 0x80807f8080808080,
   0x01fe010101010101, 0x02fd020202020202, 0x04fb040404040404, 0x08f7080808080808,
   0x10ef101010101010, 0x20df202020202020, 0x40bf404040404040, 0x807f808080808080,
   0xfe01010101010101, 0xfd02020202020202, 0xfb04040404040404, 0xf708080808080808,
   0xef10101010101010, 0xdf20202020202020, 0xbf40404040404040, 0x7f80808080808080];
*/
// Alternate rook destinations ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
/*
use crate::misc::FILE_A;
use crate::util::pext;

pub fn rook_destinations(board : u64, square : usize) -> u64
{
  let rank  = square / 8;
  let file  = square % 8;
  let r_ofs = square & !7;
  let h_idx = (board >> r_ofs) as usize & 255;
  let h_dst = reachable(file, h_idx);
  let v_idx = unsafe { pext(board >> file, FILE_A) as usize };
  let v_dst = unsafe { pdep(reachable(rank, v_idx), FILE_A) };
  return (h_dst << r_ofs) | (v_dst << file);
}

pub fn reachable(ln : usize, idx : usize) -> u64
{
  return unsafe { *REACHABLE.get_unchecked(ln).get_unchecked(idx) as u64 };
}

static REACHABLE : [[u8; 256]; 8] =
  [
    [0xfe, 0xfe, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02, 0x0e, 0x0e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02,
     0x1e, 0x1e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02, 0x0e, 0x0e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02,
     0x3e, 0x3e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02, 0x0e, 0x0e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02,
     0x1e, 0x1e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02, 0x0e, 0x0e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02,
     0x7e, 0x7e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02, 0x0e, 0x0e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02,
     0x1e, 0x1e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02, 0x0e, 0x0e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02,
     0x3e, 0x3e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02, 0x0e, 0x0e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02,
     0x1e, 0x1e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02, 0x0e, 0x0e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02,
     0xfe, 0xfe, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02, 0x0e, 0x0e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02,
     0x1e, 0x1e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02, 0x0e, 0x0e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02,
     0x3e, 0x3e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02, 0x0e, 0x0e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02,
     0x1e, 0x1e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02, 0x0e, 0x0e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02,
     0x7e, 0x7e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02, 0x0e, 0x0e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02,
     0x1e, 0x1e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02, 0x0e, 0x0e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02,
     0x3e, 0x3e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02, 0x0e, 0x0e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02,
     0x1e, 0x1e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02, 0x0e, 0x0e, 0x02, 0x02, 0x06, 0x06, 0x02, 0x02,
    ],
    [0xfd, 0xfd, 0xfd, 0xfd, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x05, 0x05, 0x05,
     0x1d, 0x1d, 0x1d, 0x1d, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x05, 0x05, 0x05,
     0x3d, 0x3d, 0x3d, 0x3d, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x05, 0x05, 0x05,
     0x1d, 0x1d, 0x1d, 0x1d, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x05, 0x05, 0x05,
     0x7d, 0x7d, 0x7d, 0x7d, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x05, 0x05, 0x05,
     0x1d, 0x1d, 0x1d, 0x1d, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x05, 0x05, 0x05,
     0x3d, 0x3d, 0x3d, 0x3d, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x05, 0x05, 0x05,
     0x1d, 0x1d, 0x1d, 0x1d, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x05, 0x05, 0x05,
     0xfd, 0xfd, 0xfd, 0xfd, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x05, 0x05, 0x05,
     0x1d, 0x1d, 0x1d, 0x1d, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x05, 0x05, 0x05,
     0x3d, 0x3d, 0x3d, 0x3d, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x05, 0x05, 0x05,
     0x1d, 0x1d, 0x1d, 0x1d, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x05, 0x05, 0x05,
     0x7d, 0x7d, 0x7d, 0x7d, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x05, 0x05, 0x05,
     0x1d, 0x1d, 0x1d, 0x1d, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x05, 0x05, 0x05,
     0x3d, 0x3d, 0x3d, 0x3d, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x05, 0x05, 0x05,
     0x1d, 0x1d, 0x1d, 0x1d, 0x05, 0x05, 0x05, 0x05, 0x0d, 0x0d, 0x0d, 0x0d, 0x05, 0x05, 0x05, 0x05,
    ],
    [0xfb, 0xfb, 0xfa, 0xfa, 0xfb, 0xfb, 0xfa, 0xfa, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a,
     0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a,
     0x3b, 0x3b, 0x3a, 0x3a, 0x3b, 0x3b, 0x3a, 0x3a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a,
     0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a,
     0x7b, 0x7b, 0x7a, 0x7a, 0x7b, 0x7b, 0x7a, 0x7a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a,
     0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a,
     0x3b, 0x3b, 0x3a, 0x3a, 0x3b, 0x3b, 0x3a, 0x3a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a,
     0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a,
     0xfb, 0xfb, 0xfa, 0xfa, 0xfb, 0xfb, 0xfa, 0xfa, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a,
     0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a,
     0x3b, 0x3b, 0x3a, 0x3a, 0x3b, 0x3b, 0x3a, 0x3a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a,
     0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a,
     0x7b, 0x7b, 0x7a, 0x7a, 0x7b, 0x7b, 0x7a, 0x7a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a,
     0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a,
     0x3b, 0x3b, 0x3a, 0x3a, 0x3b, 0x3b, 0x3a, 0x3a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a,
     0x1b, 0x1b, 0x1a, 0x1a, 0x1b, 0x1b, 0x1a, 0x1a, 0x0b, 0x0b, 0x0a, 0x0a, 0x0b, 0x0b, 0x0a, 0x0a,
    ],
    [0xf7, 0xf7, 0xf6, 0xf6, 0xf4, 0xf4, 0xf4, 0xf4, 0xf7, 0xf7, 0xf6, 0xf6, 0xf4, 0xf4, 0xf4, 0xf4,
     0x17, 0x17, 0x16, 0x16, 0x14, 0x14, 0x14, 0x14, 0x17, 0x17, 0x16, 0x16, 0x14, 0x14, 0x14, 0x14,
     0x37, 0x37, 0x36, 0x36, 0x34, 0x34, 0x34, 0x34, 0x37, 0x37, 0x36, 0x36, 0x34, 0x34, 0x34, 0x34,
     0x17, 0x17, 0x16, 0x16, 0x14, 0x14, 0x14, 0x14, 0x17, 0x17, 0x16, 0x16, 0x14, 0x14, 0x14, 0x14,
     0x77, 0x77, 0x76, 0x76, 0x74, 0x74, 0x74, 0x74, 0x77, 0x77, 0x76, 0x76, 0x74, 0x74, 0x74, 0x74,
     0x17, 0x17, 0x16, 0x16, 0x14, 0x14, 0x14, 0x14, 0x17, 0x17, 0x16, 0x16, 0x14, 0x14, 0x14, 0x14,
     0x37, 0x37, 0x36, 0x36, 0x34, 0x34, 0x34, 0x34, 0x37, 0x37, 0x36, 0x36, 0x34, 0x34, 0x34, 0x34,
     0x17, 0x17, 0x16, 0x16, 0x14, 0x14, 0x14, 0x14, 0x17, 0x17, 0x16, 0x16, 0x14, 0x14, 0x14, 0x14,
     0xf7, 0xf7, 0xf6, 0xf6, 0xf4, 0xf4, 0xf4, 0xf4, 0xf7, 0xf7, 0xf6, 0xf6, 0xf4, 0xf4, 0xf4, 0xf4,
     0x17, 0x17, 0x16, 0x16, 0x14, 0x14, 0x14, 0x14, 0x17, 0x17, 0x16, 0x16, 0x14, 0x14, 0x14, 0x14,
     0x37, 0x37, 0x36, 0x36, 0x34, 0x34, 0x34, 0x34, 0x37, 0x37, 0x36, 0x36, 0x34, 0x34, 0x34, 0x34,
     0x17, 0x17, 0x16, 0x16, 0x14, 0x14, 0x14, 0x14, 0x17, 0x17, 0x16, 0x16, 0x14, 0x14, 0x14, 0x14,
     0x77, 0x77, 0x76, 0x76, 0x74, 0x74, 0x74, 0x74, 0x77, 0x77, 0x76, 0x76, 0x74, 0x74, 0x74, 0x74,
     0x17, 0x17, 0x16, 0x16, 0x14, 0x14, 0x14, 0x14, 0x17, 0x17, 0x16, 0x16, 0x14, 0x14, 0x14, 0x14,
     0x37, 0x37, 0x36, 0x36, 0x34, 0x34, 0x34, 0x34, 0x37, 0x37, 0x36, 0x36, 0x34, 0x34, 0x34, 0x34,
     0x17, 0x17, 0x16, 0x16, 0x14, 0x14, 0x14, 0x14, 0x17, 0x17, 0x16, 0x16, 0x14, 0x14, 0x14, 0x14,
    ],
    [0xef, 0xef, 0xee, 0xee, 0xec, 0xec, 0xec, 0xec, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8,
     0xef, 0xef, 0xee, 0xee, 0xec, 0xec, 0xec, 0xec, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8,
     0x2f, 0x2f, 0x2e, 0x2e, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28,
     0x2f, 0x2f, 0x2e, 0x2e, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28,
     0x6f, 0x6f, 0x6e, 0x6e, 0x6c, 0x6c, 0x6c, 0x6c, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68,
     0x6f, 0x6f, 0x6e, 0x6e, 0x6c, 0x6c, 0x6c, 0x6c, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68,
     0x2f, 0x2f, 0x2e, 0x2e, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28,
     0x2f, 0x2f, 0x2e, 0x2e, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28,
     0xef, 0xef, 0xee, 0xee, 0xec, 0xec, 0xec, 0xec, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8,
     0xef, 0xef, 0xee, 0xee, 0xec, 0xec, 0xec, 0xec, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8,
     0x2f, 0x2f, 0x2e, 0x2e, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28,
     0x2f, 0x2f, 0x2e, 0x2e, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28,
     0x6f, 0x6f, 0x6e, 0x6e, 0x6c, 0x6c, 0x6c, 0x6c, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68,
     0x6f, 0x6f, 0x6e, 0x6e, 0x6c, 0x6c, 0x6c, 0x6c, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68,
     0x2f, 0x2f, 0x2e, 0x2e, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28,
     0x2f, 0x2f, 0x2e, 0x2e, 0x2c, 0x2c, 0x2c, 0x2c, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28,
    ],
    [0xdf, 0xdf, 0xde, 0xde, 0xdc, 0xdc, 0xdc, 0xdc, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8,
     0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0,
     0xdf, 0xdf, 0xde, 0xde, 0xdc, 0xdc, 0xdc, 0xdc, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8,
     0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0,
     0x5f, 0x5f, 0x5e, 0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
     0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50,
     0x5f, 0x5f, 0x5e, 0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
     0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50,
     0xdf, 0xdf, 0xde, 0xde, 0xdc, 0xdc, 0xdc, 0xdc, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8,
     0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0,
     0xdf, 0xdf, 0xde, 0xde, 0xdc, 0xdc, 0xdc, 0xdc, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8,
     0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0,
     0x5f, 0x5f, 0x5e, 0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
     0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50,
     0x5f, 0x5f, 0x5e, 0x5e, 0x5c, 0x5c, 0x5c, 0x5c, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
     0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50,
    ],
    [0xbf, 0xbf, 0xbe, 0xbe, 0xbc, 0xbc, 0xbc, 0xbc, 0xb8, 0xb8, 0xb8, 0xb8, 0xb8, 0xb8, 0xb8, 0xb8,
     0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0,
     0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0,
     0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0,
     0xbf, 0xbf, 0xbe, 0xbe, 0xbc, 0xbc, 0xbc, 0xbc, 0xb8, 0xb8, 0xb8, 0xb8, 0xb8, 0xb8, 0xb8, 0xb8,
     0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0,
     0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0,
     0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0,
     0xbf, 0xbf, 0xbe, 0xbe, 0xbc, 0xbc, 0xbc, 0xbc, 0xb8, 0xb8, 0xb8, 0xb8, 0xb8, 0xb8, 0xb8, 0xb8,
     0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0,
     0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0,
     0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0,
     0xbf, 0xbf, 0xbe, 0xbe, 0xbc, 0xbc, 0xbc, 0xbc, 0xb8, 0xb8, 0xb8, 0xb8, 0xb8, 0xb8, 0xb8, 0xb8,
     0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0,
     0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0,
     0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0,
    ],
    [0x7f, 0x7f, 0x7e, 0x7e, 0x7c, 0x7c, 0x7c, 0x7c, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
     0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
     0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
     0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
     0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
     0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
     0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
     0x7f, 0x7f, 0x7e, 0x7e, 0x7c, 0x7c, 0x7c, 0x7c, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78,
     0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70,
     0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
     0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
     0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
     0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
     0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
     0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    ],
  ];
*/
